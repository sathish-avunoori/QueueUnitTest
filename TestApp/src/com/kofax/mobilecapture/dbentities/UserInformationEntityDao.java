package com.kofax.mobilecapture.dbentities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kofax.mobilecapture.dbentities.UserInformationEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table USER_INFORMATION_ENTITY.
*/
public class UserInformationEntityDao extends AbstractDao<UserInformationEntity, Long> {

    public static final String TABLENAME = "USER_INFORMATION_ENTITY";

    /**
     * Properties of entity UserInformationEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property UserInformationId = new Property(0, Long.class, "userInformationId", true, "USER_INFORMATION_ID");
        public final static Property UserName = new Property(1, String.class, "userName", false, "USER_NAME");
        public final static Property HostName = new Property(2, String.class, "hostName", false, "HOST_NAME");
        public final static Property ServerType = new Property(3, String.class, "serverType", false, "SERVER_TYPE");
        public final static Property DocumentTypes = new Property(4, String.class, "documentTypes", false, "DOCUMENT_TYPES");
    };

    private DaoSession daoSession;


    public UserInformationEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UserInformationEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'USER_INFORMATION_ENTITY' (" + //
                "'USER_INFORMATION_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: userInformationId
                "'USER_NAME' TEXT," + // 1: userName
                "'HOST_NAME' TEXT," + // 2: hostName
                "'SERVER_TYPE' TEXT," + // 3: serverType
                "'DOCUMENT_TYPES' TEXT);"); // 4: documentTypes
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER_INFORMATION_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UserInformationEntity entity) {
        stmt.clearBindings();
 
        Long userInformationId = entity.getUserInformationId();
        if (userInformationId != null) {
            stmt.bindLong(1, userInformationId);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String hostName = entity.getHostName();
        if (hostName != null) {
            stmt.bindString(3, hostName);
        }
 
        String serverType = entity.getServerType();
        if (serverType != null) {
            stmt.bindString(4, serverType);
        }
 
        String documentTypes = entity.getDocumentTypes();
        if (documentTypes != null) {
            stmt.bindString(5, documentTypes);
        }
    }

    @Override
    protected void attachEntity(UserInformationEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UserInformationEntity readEntity(Cursor cursor, int offset) {
        UserInformationEntity entity = new UserInformationEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // userInformationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // hostName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // serverType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // documentTypes
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UserInformationEntity entity, int offset) {
        entity.setUserInformationId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setHostName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setServerType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDocumentTypes(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UserInformationEntity entity, long rowId) {
        entity.setUserInformationId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UserInformationEntity entity) {
        if(entity != null) {
            return entity.getUserInformationId();
        } else {
        return null;
    }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
