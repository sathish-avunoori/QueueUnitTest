// Copyright (c) 2014 Kofax. Use of this code is with permission pursuant to Kofax license terms.
package com.kofax.mobilecapture.dbentities;

import com.kofax.mobilecapture.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table PAGE_ENTITY.
 */
public class PageEntity {

    private Long pageId;
    private String imageType;
    private Long processingStatus;
    private String imageFilePath;
    private String processedImageFilePath;
    private String imageLatitude;
    private String imageLongitude;
    private java.util.Date date;
    private String imageThumbnailPath;
    private String processedImageThumbnailPath;
    private byte[] imageSerializedData;
    private Integer sequenceNumber;
    private long itemId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient PageEntityDao myDao;

    private ItemEntity itemEntity;
    private Long itemEntity__resolvedKey;


    public PageEntity() {
    }

    public PageEntity(Long pageId) {
        this.pageId = pageId;
    }

    public PageEntity(Long pageId, String imageType, Long processingStatus, String imageFilePath, String processedImageFilePath, String imageLatitude, String imageLongitude, java.util.Date date, String imageThumbnailPath, String processedImageThumbnailPath, byte[] imageSerializedData, Integer sequenceNumber, long itemId) {
        this.pageId = pageId;
        this.imageType = imageType;
        this.processingStatus = processingStatus;
        this.imageFilePath = imageFilePath;
        this.processedImageFilePath = processedImageFilePath;
        this.imageLatitude = imageLatitude;
        this.imageLongitude = imageLongitude;
        this.date = date;
        this.imageThumbnailPath = imageThumbnailPath;
        this.processedImageThumbnailPath = processedImageThumbnailPath;
        this.imageSerializedData = imageSerializedData;
        this.sequenceNumber = sequenceNumber;
        this.itemId = itemId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPageEntityDao() : null;
    }

    public Long getPageId() {
        return pageId;
    }

    public void setPageId(Long pageId) {
        this.pageId = pageId;
    }

    public String getImageType() {
        return imageType;
    }

    public void setImageType(String imageType) {
        this.imageType = imageType;
    }

    public Long getProcessingStatus() {
        return processingStatus;
    }

    public void setProcessingStatus(Long processingStatus) {
        this.processingStatus = processingStatus;
    }

    public String getImageFilePath() {
        return imageFilePath;
    }

    public void setImageFilePath(String imageFilePath) {
        this.imageFilePath = imageFilePath;
    }

    public String getProcessedImageFilePath() {
        return processedImageFilePath;
    }

    public void setProcessedImageFilePath(String processedImageFilePath) {
        this.processedImageFilePath = processedImageFilePath;
    }

    public String getImageLatitude() {
        return imageLatitude;
    }

    public void setImageLatitude(String imageLatitude) {
        this.imageLatitude = imageLatitude;
    }

    public String getImageLongitude() {
        return imageLongitude;
    }

    public void setImageLongitude(String imageLongitude) {
        this.imageLongitude = imageLongitude;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public String getImageThumbnailPath() {
        return imageThumbnailPath;
    }

    public void setImageThumbnailPath(String imageThumbnailPath) {
        this.imageThumbnailPath = imageThumbnailPath;
    }

    public String getProcessedImageThumbnailPath() {
        return processedImageThumbnailPath;
    }

    public void setProcessedImageThumbnailPath(String processedImageThumbnailPath) {
        this.processedImageThumbnailPath = processedImageThumbnailPath;
    }

    public byte[] getImageSerializedData() {
        return imageSerializedData;
    }

    public void setImageSerializedData(byte[] imageSerializedData) {
        this.imageSerializedData = imageSerializedData;
    }

    public Integer getSequenceNumber() {
        return sequenceNumber;
    }

    public void setSequenceNumber(Integer sequenceNumber) {
        this.sequenceNumber = sequenceNumber;
    }

    public long getItemId() {
        return itemId;
    }

    public void setItemId(long itemId) {
        this.itemId = itemId;
    }

    /** To-one relationship, resolved on first access. */
    public ItemEntity getItemEntity() {
        long __key = this.itemId;
        if (itemEntity__resolvedKey == null || !itemEntity__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ItemEntityDao targetDao = daoSession.getItemEntityDao();
            ItemEntity itemEntityNew = targetDao.load(__key);
            synchronized (this) {
                itemEntity = itemEntityNew;
            	itemEntity__resolvedKey = __key;
            }
        }
        return itemEntity;
    }

    public void setItemEntity(ItemEntity itemEntity) {
        if (itemEntity == null) {
            throw new DaoException("To-one property 'itemId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.itemEntity = itemEntity;
            itemId = itemEntity.getItemId();
            itemEntity__resolvedKey = itemId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
