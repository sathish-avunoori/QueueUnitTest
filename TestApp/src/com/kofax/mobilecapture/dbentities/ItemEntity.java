// Copyright (c) 2014 Kofax. Use of this code is with permission pursuant to Kofax license terms.
package com.kofax.mobilecapture.dbentities;

import java.util.List;
import com.kofax.mobilecapture.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ITEM_ENTITY.
 */
public class ItemEntity {

    private Long itemId;
    private String itemName;
    /** Not-null value. */
    private String itemTypeName;
    private java.util.Date itemCreatedTimeStamp;
    private String userId;
    private String serverId;
    private String hostname;
    private String fieldName;
    private byte[] itemSerializedData;
    private Boolean isOffline;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ItemEntityDao myDao;

    private List<PageEntity> pages;

    public ItemEntity() {
    }

    public ItemEntity(Long itemId) {
        this.itemId = itemId;
    }

    public ItemEntity(Long itemId, String itemName, String itemTypeName, java.util.Date itemCreatedTimeStamp, String userId, String serverId, String hostname, String fieldName, byte[] itemSerializedData, Boolean isOffline) {
        this.itemId = itemId;
        this.itemName = itemName;
        this.itemTypeName = itemTypeName;
        this.itemCreatedTimeStamp = itemCreatedTimeStamp;
        this.userId = userId;
        this.serverId = serverId;
        this.hostname = hostname;
        this.fieldName = fieldName;
        this.itemSerializedData = itemSerializedData;
        this.isOffline = isOffline;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getItemEntityDao() : null;
    }

    public Long getItemId() {
        return itemId;
    }

    public void setItemId(Long itemId) {
        this.itemId = itemId;
    }

    public String getItemName() {
        return itemName;
    }

    public void setItemName(String itemName) {
        this.itemName = itemName;
    }

    /** Not-null value. */
    public String getItemTypeName() {
        return itemTypeName;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setItemTypeName(String itemTypeName) {
        this.itemTypeName = itemTypeName;
    }

    public java.util.Date getItemCreatedTimeStamp() {
        return itemCreatedTimeStamp;
    }

    public void setItemCreatedTimeStamp(java.util.Date itemCreatedTimeStamp) {
        this.itemCreatedTimeStamp = itemCreatedTimeStamp;
    }

    public String getUserId() {
        return userId;
    }

    public void setUserId(String userId) {
        this.userId = userId;
    }

    public String getServerId() {
        return serverId;
    }

    public void setServerId(String serverId) {
        this.serverId = serverId;
    }

    public String getHostname() {
        return hostname;
    }

    public void setHostname(String hostname) {
        this.hostname = hostname;
    }

    public String getFieldName() {
        return fieldName;
    }

    public void setFieldName(String fieldName) {
        this.fieldName = fieldName;
    }

    public byte[] getItemSerializedData() {
        return itemSerializedData;
    }

    public void setItemSerializedData(byte[] itemSerializedData) {
        this.itemSerializedData = itemSerializedData;
    }

    public Boolean getIsOffline() {
        return isOffline;
    }

    public void setIsOffline(Boolean isOffline) {
        this.isOffline = isOffline;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PageEntity> getPages() {
        if (pages == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PageEntityDao targetDao = daoSession.getPageEntityDao();
            List<PageEntity> pagesNew = targetDao._queryItemEntity_Pages(itemId);
            synchronized (this) {
                if(pages == null) {
                    pages = pagesNew;
                }
            }
        }
        return pages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPages() {
        pages = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
