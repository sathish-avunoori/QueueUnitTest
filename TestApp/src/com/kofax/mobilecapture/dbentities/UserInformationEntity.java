package com.kofax.mobilecapture.dbentities;

import java.util.List;
import com.kofax.mobilecapture.dbentities.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table USER_INFORMATION_ENTITY.
 */
public class UserInformationEntity {

    private Long userInformationId;
    private String userName;
    private String hostName;
    private String serverType;
    private String documentTypes;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UserInformationEntityDao myDao;

    private List<ProcessingParametersEntity> documents;

    public UserInformationEntity() {
    }

    public UserInformationEntity(Long userInformationId) {
        this.userInformationId = userInformationId;
    }

    public UserInformationEntity(Long userInformationId, String userName, String hostName, String serverType, String documentTypes) {
        this.userInformationId = userInformationId;
        this.userName = userName;
        this.hostName = hostName;
        this.serverType = serverType;
        this.documentTypes = documentTypes;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUserInformationEntityDao() : null;
    }

    public Long getUserInformationId() {
        return userInformationId;
    }

    public void setUserInformationId(Long userInformationId) {
        this.userInformationId = userInformationId;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getHostName() {
        return hostName;
    }

    public void setHostName(String hostName) {
        this.hostName = hostName;
    }

    public String getServerType() {
        return serverType;
    }

    public void setServerType(String serverType) {
        this.serverType = serverType;
    }

    public String getDocumentTypes() {
        return documentTypes;
    }

    public void setDocumentTypes(String documentTypes) {
        this.documentTypes = documentTypes;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ProcessingParametersEntity> getDocuments() {
        if (documents == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProcessingParametersEntityDao targetDao = daoSession.getProcessingParametersEntityDao();
            List<ProcessingParametersEntity> documentsNew = targetDao._queryUserInformationEntity_Documents(userInformationId);
            synchronized (this) {
                if(documents == null) {
                    documents = documentsNew;
                }
            }
        }
        return documents;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDocuments() {
        documents = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
