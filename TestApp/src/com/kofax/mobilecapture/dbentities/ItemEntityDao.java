// Copyright (c) 2014 Kofax. Use of this code is with permission pursuant to Kofax license terms.
package com.kofax.mobilecapture.dbentities;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.kofax.mobilecapture.dbentities.ItemEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table ITEM_ENTITY.
*/
public class ItemEntityDao extends AbstractDao<ItemEntity, Long> {

    public static final String TABLENAME = "ITEM_ENTITY";

    /**
     * Properties of entity ItemEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ItemId = new Property(0, Long.class, "itemId", true, "ITEM_ID");
        public final static Property ItemName = new Property(1, String.class, "itemName", false, "ITEM_NAME");
        public final static Property ItemTypeName = new Property(2, String.class, "itemTypeName", false, "ITEM_TYPE_NAME");
        public final static Property ItemCreatedTimeStamp = new Property(3, java.util.Date.class, "itemCreatedTimeStamp", false, "ITEM_CREATED_TIME_STAMP");
        public final static Property UserId = new Property(4, String.class, "userId", false, "USER_ID");
        public final static Property ServerId = new Property(5, String.class, "serverId", false, "SERVER_ID");
        public final static Property Hostname = new Property(6, String.class, "hostname", false, "HOSTNAME");
        public final static Property FieldName = new Property(7, String.class, "fieldName", false, "FIELD_NAME");
        public final static Property ItemSerializedData = new Property(8, byte[].class, "itemSerializedData", false, "ITEM_SERIALIZED_DATA");
        public final static Property IsOffline = new Property(9, Boolean.class, "isOffline", false, "IS_OFFLINE");
    };

    private DaoSession daoSession;


    public ItemEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ItemEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'ITEM_ENTITY' (" + //
                "'ITEM_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: itemId
                "'ITEM_NAME' TEXT," + // 1: itemName
                "'ITEM_TYPE_NAME' TEXT NOT NULL ," + // 2: itemTypeName
                "'ITEM_CREATED_TIME_STAMP' INTEGER," + // 3: itemCreatedTimeStamp
                "'USER_ID' TEXT," + // 4: userId
                "'SERVER_ID' TEXT," + // 5: serverId
                "'HOSTNAME' TEXT," + // 6: hostname
                "'FIELD_NAME' TEXT," + // 7: fieldName
                "'ITEM_SERIALIZED_DATA' BLOB," + // 8: itemSerializedData
                "'IS_OFFLINE' INTEGER);"); // 9: isOffline
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'ITEM_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ItemEntity entity) {
        stmt.clearBindings();
 
        Long itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindLong(1, itemId);
        }
 
        String itemName = entity.getItemName();
        if (itemName != null) {
            stmt.bindString(2, itemName);
        }
        stmt.bindString(3, entity.getItemTypeName());
 
        java.util.Date itemCreatedTimeStamp = entity.getItemCreatedTimeStamp();
        if (itemCreatedTimeStamp != null) {
            stmt.bindLong(4, itemCreatedTimeStamp.getTime());
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(5, userId);
        }
 
        String serverId = entity.getServerId();
        if (serverId != null) {
            stmt.bindString(6, serverId);
        }
 
        String hostname = entity.getHostname();
        if (hostname != null) {
            stmt.bindString(7, hostname);
        }
 
        String fieldName = entity.getFieldName();
        if (fieldName != null) {
            stmt.bindString(8, fieldName);
        }
 
        byte[] itemSerializedData = entity.getItemSerializedData();
        if (itemSerializedData != null) {
            stmt.bindBlob(9, itemSerializedData);
        }
 
        Boolean isOffline = entity.getIsOffline();
        if (isOffline != null) {
            stmt.bindLong(10, isOffline ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(ItemEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ItemEntity readEntity(Cursor cursor, int offset) {
        ItemEntity entity = new ItemEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // itemId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemName
            cursor.getString(offset + 2), // itemTypeName
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // itemCreatedTimeStamp
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // serverId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hostname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // fieldName
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8), // itemSerializedData
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0 // isOffline
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ItemEntity entity, int offset) {
        entity.setItemId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setItemTypeName(cursor.getString(offset + 2));
        entity.setItemCreatedTimeStamp(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setUserId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setServerId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setHostname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFieldName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItemSerializedData(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
        entity.setIsOffline(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ItemEntity entity, long rowId) {
        entity.setItemId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ItemEntity entity) {
        if(entity != null) {
            return entity.getItemId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
