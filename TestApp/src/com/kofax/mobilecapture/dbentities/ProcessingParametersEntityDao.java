package com.kofax.mobilecapture.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kofax.mobilecapture.dbentities.ProcessingParametersEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PROCESSING_PARAMETERS_ENTITY.
*/
public class ProcessingParametersEntityDao extends AbstractDao<ProcessingParametersEntity, Long> {

    public static final String TABLENAME = "PROCESSING_PARAMETERS_ENTITY";

    /**
     * Properties of entity ProcessingParametersEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ProcessId = new Property(0, Long.class, "processId", true, "PROCESS_ID");
        public final static Property DocumentTypeName = new Property(1, String.class, "documentTypeName", false, "DOCUMENT_TYPE_NAME");
        public final static Property SerializeDocument = new Property(2, byte[].class, "serializeDocument", false, "SERIALIZE_DOCUMENT");
        public final static Property UserInformationId = new Property(3, long.class, "userInformationId", false, "USER_INFORMATION_ID");
    };

    private DaoSession daoSession;

    private Query<ProcessingParametersEntity> userInformationEntity_DocumentsQuery;

    public ProcessingParametersEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ProcessingParametersEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PROCESSING_PARAMETERS_ENTITY' (" + //
                "'PROCESS_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: processId
                "'DOCUMENT_TYPE_NAME' TEXT," + // 1: documentTypeName
                "'SERIALIZE_DOCUMENT' BLOB," + // 2: serializeDocument
                "'USER_INFORMATION_ID' INTEGER NOT NULL );"); // 3: userInformationId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PROCESSING_PARAMETERS_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ProcessingParametersEntity entity) {
        stmt.clearBindings();
 
        Long processId = entity.getProcessId();
        if (processId != null) {
            stmt.bindLong(1, processId);
        }
 
        String documentTypeName = entity.getDocumentTypeName();
        if (documentTypeName != null) {
            stmt.bindString(2, documentTypeName);
        }
 
        byte[] serializeDocument = entity.getSerializeDocument();
        if (serializeDocument != null) {
            stmt.bindBlob(3, serializeDocument);
        }
        stmt.bindLong(4, entity.getUserInformationId());
    }

    @Override
    protected void attachEntity(ProcessingParametersEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ProcessingParametersEntity readEntity(Cursor cursor, int offset) {
        ProcessingParametersEntity entity = new ProcessingParametersEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // processId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // documentTypeName
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2), // serializeDocument
            cursor.getLong(offset + 3) // userInformationId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ProcessingParametersEntity entity, int offset) {
        entity.setProcessId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDocumentTypeName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerializeDocument(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
        entity.setUserInformationId(cursor.getLong(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ProcessingParametersEntity entity, long rowId) {
        entity.setProcessId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ProcessingParametersEntity entity) {
        if(entity != null) {
            return entity.getProcessId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "documents" to-many relationship of UserInformationEntity. */
    public List<ProcessingParametersEntity> _queryUserInformationEntity_Documents(long userInformationId) {
        synchronized (this) {
            if (userInformationEntity_DocumentsQuery == null) {
                QueryBuilder<ProcessingParametersEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserInformationId.eq(null));
                userInformationEntity_DocumentsQuery = queryBuilder.build();
            }
        }
        Query<ProcessingParametersEntity> query = userInformationEntity_DocumentsQuery.forCurrentThread();
        query.setParameter(0, userInformationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getUserInformationEntityDao().getAllColumns());
            builder.append(" FROM PROCESSING_PARAMETERS_ENTITY T");
            builder.append(" LEFT JOIN USER_INFORMATION_ENTITY T0 ON T.'USER_INFORMATION_ID'=T0.'USER_INFORMATION_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected ProcessingParametersEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        ProcessingParametersEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        UserInformationEntity userInformationEntity = loadCurrentOther(daoSession.getUserInformationEntityDao(), cursor, offset);
         if(userInformationEntity != null) {
            entity.setUserInformationEntity(userInformationEntity);
        }

        return entity;    
    }

    public ProcessingParametersEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<ProcessingParametersEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<ProcessingParametersEntity> list = new ArrayList<ProcessingParametersEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<ProcessingParametersEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<ProcessingParametersEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
