// Copyright (c) 2014 Kofax. Use of this code is with permission pursuant to Kofax license terms.
package com.kofax.mobilecapture.dbentities;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.kofax.mobilecapture.dbentities.PageEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PAGE_ENTITY.
*/
public class PageEntityDao extends AbstractDao<PageEntity, Long> {

    public static final String TABLENAME = "PAGE_ENTITY";

    /**
     * Properties of entity PageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property PageId = new Property(0, Long.class, "pageId", true, "PAGE_ID");
        public final static Property ImageType = new Property(1, String.class, "imageType", false, "IMAGE_TYPE");
        public final static Property ProcessingStatus = new Property(2, Long.class, "processingStatus", false, "PROCESSING_STATUS");
        public final static Property ImageFilePath = new Property(3, String.class, "imageFilePath", false, "IMAGE_FILE_PATH");
        public final static Property ProcessedImageFilePath = new Property(4, String.class, "processedImageFilePath", false, "PROCESSED_IMAGE_FILE_PATH");
        public final static Property ImageLatitude = new Property(5, String.class, "imageLatitude", false, "IMAGE_LATITUDE");
        public final static Property ImageLongitude = new Property(6, String.class, "imageLongitude", false, "IMAGE_LONGITUDE");
        public final static Property Date = new Property(7, java.util.Date.class, "date", false, "DATE");
        public final static Property ImageThumbnailPath = new Property(8, String.class, "imageThumbnailPath", false, "IMAGE_THUMBNAIL_PATH");
        public final static Property ProcessedImageThumbnailPath = new Property(9, String.class, "processedImageThumbnailPath", false, "PROCESSED_IMAGE_THUMBNAIL_PATH");
        public final static Property ImageSerializedData = new Property(10, byte[].class, "imageSerializedData", false, "IMAGE_SERIALIZED_DATA");
        public final static Property SequenceNumber = new Property(11, Integer.class, "sequenceNumber", false, "SEQUENCE_NUMBER");
        public final static Property ItemId = new Property(12, long.class, "itemId", false, "ITEM_ID");
    };

    private DaoSession daoSession;

    private Query<PageEntity> itemEntity_PagesQuery;

    public PageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PAGE_ENTITY' (" + //
                "'PAGE_ID' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: pageId
                "'IMAGE_TYPE' TEXT," + // 1: imageType
                "'PROCESSING_STATUS' INTEGER," + // 2: processingStatus
                "'IMAGE_FILE_PATH' TEXT," + // 3: imageFilePath
                "'PROCESSED_IMAGE_FILE_PATH' TEXT," + // 4: processedImageFilePath
                "'IMAGE_LATITUDE' TEXT," + // 5: imageLatitude
                "'IMAGE_LONGITUDE' TEXT," + // 6: imageLongitude
                "'DATE' INTEGER," + // 7: date
                "'IMAGE_THUMBNAIL_PATH' TEXT," + // 8: imageThumbnailPath
                "'PROCESSED_IMAGE_THUMBNAIL_PATH' TEXT," + // 9: processedImageThumbnailPath
                "'IMAGE_SERIALIZED_DATA' BLOB," + // 10: imageSerializedData
                "'SEQUENCE_NUMBER' INTEGER," + // 11: sequenceNumber
                "'ITEM_ID' INTEGER NOT NULL );"); // 12: itemId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PAGE_ENTITY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PageEntity entity) {
        stmt.clearBindings();
 
        Long pageId = entity.getPageId();
        if (pageId != null) {
            stmt.bindLong(1, pageId);
        }
 
        String imageType = entity.getImageType();
        if (imageType != null) {
            stmt.bindString(2, imageType);
        }
 
        Long processingStatus = entity.getProcessingStatus();
        if (processingStatus != null) {
            stmt.bindLong(3, processingStatus);
        }
 
        String imageFilePath = entity.getImageFilePath();
        if (imageFilePath != null) {
            stmt.bindString(4, imageFilePath);
        }
 
        String processedImageFilePath = entity.getProcessedImageFilePath();
        if (processedImageFilePath != null) {
            stmt.bindString(5, processedImageFilePath);
        }
 
        String imageLatitude = entity.getImageLatitude();
        if (imageLatitude != null) {
            stmt.bindString(6, imageLatitude);
        }
 
        String imageLongitude = entity.getImageLongitude();
        if (imageLongitude != null) {
            stmt.bindString(7, imageLongitude);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(8, date.getTime());
        }
 
        String imageThumbnailPath = entity.getImageThumbnailPath();
        if (imageThumbnailPath != null) {
            stmt.bindString(9, imageThumbnailPath);
        }
 
        String processedImageThumbnailPath = entity.getProcessedImageThumbnailPath();
        if (processedImageThumbnailPath != null) {
            stmt.bindString(10, processedImageThumbnailPath);
        }
 
        byte[] imageSerializedData = entity.getImageSerializedData();
        if (imageSerializedData != null) {
            stmt.bindBlob(11, imageSerializedData);
        }
 
        Integer sequenceNumber = entity.getSequenceNumber();
        if (sequenceNumber != null) {
            stmt.bindLong(12, sequenceNumber);
        }
        stmt.bindLong(13, entity.getItemId());
    }

    @Override
    protected void attachEntity(PageEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PageEntity readEntity(Cursor cursor, int offset) {
        PageEntity entity = new PageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // pageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imageType
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // processingStatus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // imageFilePath
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // processedImageFilePath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // imageLatitude
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageLongitude
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // date
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // imageThumbnailPath
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // processedImageThumbnailPath
            cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10), // imageSerializedData
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // sequenceNumber
            cursor.getLong(offset + 12) // itemId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PageEntity entity, int offset) {
        entity.setPageId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImageType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setProcessingStatus(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setImageFilePath(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProcessedImageFilePath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setImageLatitude(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageLongitude(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setImageThumbnailPath(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setProcessedImageThumbnailPath(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setImageSerializedData(cursor.isNull(offset + 10) ? null : cursor.getBlob(offset + 10));
        entity.setSequenceNumber(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setItemId(cursor.getLong(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PageEntity entity, long rowId) {
        entity.setPageId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PageEntity entity) {
        if(entity != null) {
            return entity.getPageId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "pages" to-many relationship of ItemEntity. */
    public List<PageEntity> _queryItemEntity_Pages(long itemId) {
        synchronized (this) {
            if (itemEntity_PagesQuery == null) {
                QueryBuilder<PageEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ItemId.eq(null));
                queryBuilder.orderRaw("SEQUENCE_NUMBER ASC");
                itemEntity_PagesQuery = queryBuilder.build();
            }
        }
        Query<PageEntity> query = itemEntity_PagesQuery.forCurrentThread();
        query.setParameter(0, itemId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getItemEntityDao().getAllColumns());
            builder.append(" FROM PAGE_ENTITY T");
            builder.append(" LEFT JOIN ITEM_ENTITY T0 ON T.'ITEM_ID'=T0.'ITEM_ID'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected PageEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        PageEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        ItemEntity itemEntity = loadCurrentOther(daoSession.getItemEntityDao(), cursor, offset);
         if(itemEntity != null) {
            entity.setItemEntity(itemEntity);
        }

        return entity;    
    }

    public PageEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<PageEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<PageEntity> list = new ArrayList<PageEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<PageEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<PageEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
