// Copyright (c) 2014 Kofax. Use of this code is with permission pursuant to Kofax license terms.
package com.kofax.mobilecapture.dbentities;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import com.kofax.mobilecapture.dbentities.ItemEntity;
import com.kofax.mobilecapture.dbentities.PageEntity;
import com.kofax.mobilecapture.dbentities.UserInformationEntity;
import com.kofax.mobilecapture.dbentities.ProcessingParametersEntity;

import com.kofax.mobilecapture.dbentities.ItemEntityDao;
import com.kofax.mobilecapture.dbentities.PageEntityDao;
import com.kofax.mobilecapture.dbentities.UserInformationEntityDao;
import com.kofax.mobilecapture.dbentities.ProcessingParametersEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig itemEntityDaoConfig;
    private final DaoConfig pageEntityDaoConfig;
    private final DaoConfig userInformationEntityDaoConfig;
    private final DaoConfig processingParametersEntityDaoConfig;

    private final ItemEntityDao itemEntityDao;
    private final PageEntityDao pageEntityDao;
    private final UserInformationEntityDao userInformationEntityDao;
    private final ProcessingParametersEntityDao processingParametersEntityDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        itemEntityDaoConfig = daoConfigMap.get(ItemEntityDao.class).clone();
        itemEntityDaoConfig.initIdentityScope(type);

        pageEntityDaoConfig = daoConfigMap.get(PageEntityDao.class).clone();
        pageEntityDaoConfig.initIdentityScope(type);

        userInformationEntityDaoConfig = daoConfigMap.get(UserInformationEntityDao.class).clone();
        userInformationEntityDaoConfig.initIdentityScope(type);

        processingParametersEntityDaoConfig = daoConfigMap.get(ProcessingParametersEntityDao.class).clone();
        processingParametersEntityDaoConfig.initIdentityScope(type);

        itemEntityDao = new ItemEntityDao(itemEntityDaoConfig, this);
        pageEntityDao = new PageEntityDao(pageEntityDaoConfig, this);
        userInformationEntityDao = new UserInformationEntityDao(userInformationEntityDaoConfig, this);
        processingParametersEntityDao = new ProcessingParametersEntityDao(processingParametersEntityDaoConfig, this);

        registerDao(ItemEntity.class, itemEntityDao);
        registerDao(PageEntity.class, pageEntityDao);
        registerDao(UserInformationEntity.class, userInformationEntityDao);
        registerDao(ProcessingParametersEntity.class, processingParametersEntityDao);
    }
    
    public void clear() {
        itemEntityDaoConfig.getIdentityScope().clear();
        pageEntityDaoConfig.getIdentityScope().clear();
        userInformationEntityDaoConfig.getIdentityScope().clear();
        processingParametersEntityDaoConfig.getIdentityScope().clear();
    }

    public ItemEntityDao getItemEntityDao() {
        return itemEntityDao;
    }

    public PageEntityDao getPageEntityDao() {
        return pageEntityDao;
    }

    public UserInformationEntityDao getUserInformationEntityDao() {
        return userInformationEntityDao;
    }

    public ProcessingParametersEntityDao getProcessingParametersEntityDao() {
        return processingParametersEntityDao;
    }

}
