// Copyright (c) 2014 Kofax. Use of this code is with permission pursuant to Kofax license terms.
package com.kofax.mobilecapture.dbentities;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import com.kofax.mobilecapture.dbentities.ItemEntityDao;
import com.kofax.mobilecapture.dbentities.PageEntityDao;
import com.kofax.mobilecapture.dbentities.UserInformationEntityDao;
import com.kofax.mobilecapture.dbentities.ProcessingParametersEntityDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1001): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 1001;
    public static boolean Is_Upgrade_From_2_2 = false;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        ItemEntityDao.createTable(db, ifNotExists);
        PageEntityDao.createTable(db, ifNotExists);
        UserInformationEntityDao.createTable(db, ifNotExists);
        ProcessingParametersEntityDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        ItemEntityDao.dropTable(db, ifExists);
        PageEntityDao.dropTable(db, ifExists);
        UserInformationEntityDao.dropTable(db, ifExists);
        ProcessingParametersEntityDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            
            //Version 1000 = KMC 2.2 and 1001 = KMC 2.4 
            if(oldVersion == 1000 && newVersion == 1001){            	
            	db.execSQL("ALTER TABLE 'ITEM_ENTITY' ADD 'IS_OFFLINE' INTEGER DEFAULT 0");
            	UserInformationEntityDao.createTable(db, false);
            	ProcessingParametersEntityDao.createTable(db, false);
            	Is_Upgrade_From_2_2 = true;
            }else{
            dropAllTables(db, true);
            onCreate(db);
        }
    }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(ItemEntityDao.class);
        registerDaoClass(PageEntityDao.class);
        registerDaoClass(UserInformationEntityDao.class);
        registerDaoClass(ProcessingParametersEntityDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
    ///Get the status of upgrade
    public boolean isUpgradeFrom_2_2(){
    	return Is_Upgrade_From_2_2;
    }
    
}
